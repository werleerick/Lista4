# -*- coding: utf-8 -*-
"""C√≥pia de C√≥pia de ListaExercicio4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PvI1bfPfD9r6LRyrKBAb_90iFPcchqnz

# üìä Projeto Final ‚Äì An√°lise Cont√°bil com Ajuste Econ√¥mico

Este projeto tem como objetivo integrar an√°lise de dados cont√°beis de empresas com indicadores econ√¥micos, utilizando Python, Pandas, Ipeadata e Streamlit.

1) Configure o t√≠tulo na barra do navegador, da p√°gina do projeto no Streamlit e descri√ß√£o inicial do projeto (peso: 1,0)

- T√≠tulo na barra (`page_title`): Lista de Exerc√≠cios 4
- T√≠tulo da p√°gina (`header`): Projeto Final ‚Äì An√°lise Cont√°bil com Ajuste Econ√¥mico
- Descri√ß√£o projeto (`write`): Este projeto tem como objetivo integrar an√°lise de dados cont√°beis de empresas com indicadores econ√¥micos, utilizando Python, Pandas, Ipeadata e Streamlit.
"""



"""2) Importe os dados do arquivo empresas_dados.csv utilizando pandas e apresente todas as linhas da df (peso: 1,0)

Dica: Utilize `head(len(df))`
"""

import pandas as pd

df = pd.read_csv("empresas_dados.csv", sep=";")
df.head(len(df))

"""3) Calcule os indicadores Margem L√≠quida e ROA e salve como novas coluna da df. Depois apresente os dois indicadores no mesmo gr√°fico de linhas, agrupado por Ano  (peso: 1,0)

- Margem L√≠quida = Lucro L√≠quido / Receita L√≠quida * 100
- ROA = Lucro L√≠quido / Ativo Total *  100
"""

import pandas as pd
import matplotlib.pyplot as plt

df = pd.read_csv("empresas_dados.csv", sep=";")

df["Margem L√≠quida (%)"] = (df["Lucro L√≠quido"] / df["Receita L√≠quida"]) * 100
df["ROA (%)"] = (df["Lucro L√≠quido"] / df["Ativo Total"]) * 100

df_agrupado = df.groupby("Ano")[["Margem L√≠quida (%)", "ROA (%)"]].mean().reset_index()

plt.figure(figsize=(10, 6))
plt.plot(df_agrupado["Ano"], df_agrupado["Margem L√≠quida (%)"], marker='o', label="Margem L√≠quida (%)")
plt.plot(df_agrupado["Ano"], df_agrupado["ROA (%)"], marker='s', label="ROA (%)")
plt.title("Indicadores Margem L√≠quida e ROA por Ano")
plt.xlabel("Ano")
plt.ylabel("Percentual (%)")
plt.legend()
plt.grid(True)
plt.xticks(df_agrupado["Ano"], rotation=45)
plt.tight_layout()
plt.show()

"""4) Utilize o pacote ipeadatapy e fa√ßa busca para encontrar o indicador que traga o IPCA, taxa de varia√ß√£o, em % e anual: (peso: 2,0)

- Baixe os dados no per√≠odo de 2010 a 2024
- Altere o nome da coluna "YEAR" para "Ano"
- Altere o nome da coluna "VALUE ((% a.a.))" para "IPCA"
- Apresente a df para checar se tudo deu certo
"""


import ipeadatapy as ip

ip.list_series("IPCA")

ip.describe('PRECOS_IPCAG')

df1 = ip.timeseries('PRECOS_IPCAG', yearGreaterThan=2000, yearSmallerThan=2025)
df1.rename(columns={'YEAR': 'ano', 'VALUE ((% a.a.))': 'IPCA'}, inplace=True)
df1

"""5) Combine as duas df (Excel e IPEA) em uma nova df e calcule nova coluna chamada Receita Real (peso: 2,0)

- Utilize a fun√ß√£o `pd.merge()` para unificar as duas df utiilizando a coluna Ano como conex√£o (chave prim√°ria) entre elas
- Crie nova coluna chamada Receita Real que ser√° o resultado da Receita L√≠quida de cada ano deduzido o IPCA do ano: `Receita Real = Receitta L√≠quida - ( Receita L√≠quida * (IPCA/100) )`
- Apresente a nova df combinada

"""

df_2 = pd.merge(df, df1[['ano', 'IPCA']], left_on='Ano', right_on='ano', how='left')

df_2['Receita Real'] = df_2['Receita L√≠quida'] - (df_2['Receita L√≠quida'] * (df_2['IPCA'] / 100))


df_2.drop(columns='ano', inplace=True)

df_2

"""6) Crie gr√°fico de linha que apresente as vari√°veis Receita L√≠quida e Receita Real ao longo dos anos (no mesmo gr√°fico) (peso: 1,0)"""

import matplotlib.pyplot as plt

df_plot = df_2.groupby('Ano')[['Receita L√≠quida', 'Receita Real']].sum().reset_index()

plt.figure(figsize=(12,6))
plt.plot(df_plot['Ano'], df_plot['Receita L√≠quida'], label='Receita L√≠quida', marker='o')
plt.plot(df_plot['Ano'], df_plot['Receita Real'], label='Receita Real', marker='s')

plt.title('Receita L√≠quida vs Receita Real ao longo dos anos')
plt.xlabel('Ano')
plt.ylabel('Valor (R$)')
plt.legend()
plt.grid(True)
plt.xticks(df_plot['Ano'], rotation=45)
plt.tight_layout()
plt.show()

"""7) Fa√ßa os ajustes necess√°rios e leve este projeto para a web usando GitHub e Streamlit (peso: 2,0)

- Ca√ßa os ajustes necess√°rios no projeto para ser publicado no Streamlit
- Crie novo reposit√≥rio p√∫blico no GitHub e leve os arquivos .py e .csv pra l√°. Aproveite e crie o arquivo requirements.txt com os pacotes utilizados no projeto
- Crie novo projeto no Streamlit e associe ao reposit√≥rio da lista
"""
